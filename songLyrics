#!/bin/bash
################################################################################
# This may be my ugliest, but most useful creation. - NP 08-08-14 
# The purpose of this is to get songlyrics. There are several different methods
# available.
#
# Examples:
#   Use dbus interface to see what song is playing right now on spotify:
#       songLyrics spotify #   Look up lyrics on a song by artist and title:
#       songLyrics "artist" "title"
#   Look up a song by its url:
#       songLyrics <songlyrics.com url> 
#   Look up lyrics on a song by artist and title, but show the top 10 google
#   results:
#       songLyrics [-g|--google[ "artist" "title"
################################################################################
# Setup some variables
# TODO - figure out the escaping crap to get this to allow spaces
USER_AGENT='Mozilla/5.0'
CURL="curl -s -A '$USER_AGENT'";

################################################################################
# This is used to get the url for the lyrics
################################################################################
function google { 
    if [[ -n "$1" && -n "$2" ]];then
        Q="$2";
        GOOG_URL='https://www.google.com/search?tbs=li:1&q=';
        AGENT="Mozilla/4.0";
        stream=$(curl -A "$AGENT" -skLm 10 "${GOOG_URL}${Q//\ /+}" | grep -oP '\/url\?q=.+?&amp' | sed 's|/url?q=||;s|&amp||');
        if [[ "$1" == '-i' ]];then
            firefox $(echo -e "${stream//\%/\x}" | head -1);
        else
            echo -e "${stream//\%/\x}";
        fi

    elif [[ -n "$1" ]];then
            Q="$1";
            GOOG_URL='https://www.google.com/search?tbs=li:1&q=';
            AGENT="Mozilla/4.0";
            stream=$(curl -A "$AGENT" -skLm 10 "${GOOG_URL}${Q//\ /+}" | grep -oP '\/url\?q=.+?&amp' | sed 's|/url?q=||;s|&amp||');
            echo -e "${stream//\%/\x}";
    fi

}

################################################################################
# Get the lyrics of a song by googling it, and parsing result pages
################################################################################
function do_it_songLyrics() {
    # If we passed in a url
    if [[ "$1" == "--url" ]];then
        URL="$2"
    else
        ALL=$(google "$1 $2 lyrics site:songlyrics.com");
        URL="$(echo $ALL | tr ' ' '\n' | grep "songlyrics.com" -m 1)";
    fi

    if [[ -z "$URL" ]];then
        echo "There was no songlyrics.com results. Giving up now :(";
        exit 0;
    fi
    # Print the artist and title we are going to look up
    echo -e "($URL) $1 - $2: ";
    # Run the curl and store the lyrics into a var
    RESULT="$($CURL $URL | awk '/<p id=\"songLyricsDiv\"/, /<\/p>/' | sed 's/<.*>//g' | sed 's/‚Äô//g' | sed 's/‚Äò//g' |  sed 's/‚Äù/"/g' | sed 's/‚Äú/"/g' | sed 's/‚Ä¶/.../g' | sed 's/[fF][uU][cC][kK]/[32mF***[39m/g' | sed "s/&#039;/'/g" | sed 's/&rsquo;//g')";
    # If we didn't get anything, lets try the next one
    if [[ -z "$RESULT" ]];then
        echo "That URL sucked. Giving up now :(";
        exit 0;

    # We found something
    else
        echo "$RESULT"
    fi

}

################################################################################
# The a-z lyrics method
################################################################################
function do_it_azlyrics() {
    # If we passed it a url, lets just get it
    if [[ "$1" == '--url' ]];then
        URL="$2"
    else
        # Or, lets google it and get one
        ALL=$(google "$1 $2 lyrics site:azlyrics.com");
        URL="$(echo $ALL | tr ' ' '\n' | grep "azlyrics.com" -m 1)";
    fi

    if [[ -z "$URL" ]];then
        echo "There was no azlyrics.com results. Lets try songlyrics.com...";
        #do_it_azlyrics "$1" "$2"
        do_it_songLyrics "$1" "$2"
        exit
    fi

    # Print the artist and title we are going to look up
    echo -e "($URL) $1 - $2: ";
    # Run the curl and store the lyrics into a var
    #RESULT="$($CURL $URL |  awk '/<!-- start of lyrics -->/, /<!-- end of lyrics -->/' | sed 's/<.*>//g' | sed 's/^$//' | sed 's/[fF][uU][cC][kK]/[32mF***[39m/g';)";
    RESULT="$($CURL $URL |  awk '/<!-- Usage of azlyrics.com content by any third-party lyrics provider is prohibited by our licensing agreement. Sorry about that. -->/, /<!-- MxM banner -->/' | sed 's/<.*>//g' | sed 's/^$//' | sed 's/[fF][uU][cC][kK]/[32mF***[39m/g';)";
### NEW
    if [[ -z "$RESULT" ]];then
        echo "That URL sucked. Lets try songlyrics.com...";
        do_it_songLyrics "$1" "$2"
        exit 0;

    # We found something, print it
    else
        echo "$RESULT"
    fi


}
################################################################################
# Look up the title and artist in spotify
# Sets the global ARTIST and TITLE varibles
################################################################################
function lookupSpotifyInfo() {
    ARTIST="$(dbus-send --print-reply --session --dest=org.mpris.MediaPlayer2.spotify /org/mpris/MediaPlayer2 org.freedesktop.DBus.Properties.Get string:'org.mpris.MediaPlayer2.Player' string:'Metadata' | grep -A 3 artist | grep string | grep -v xesam | sed 's/^\s*//' | cut -d ' ' -f 2- | tr '(' ' ' | tr ')' ' ' | tr '"' ' ' )";

    TITLE="$(dbus-send --print-reply --session --dest=org.mpris.MediaPlayer2.spotify /org/mpris/MediaPlayer2 org.freedesktop.DBus.Properties.Get string:'org.mpris.MediaPlayer2.Player' string:'Metadata' | grep -A 3 title | grep string | grep -v xesam | sed 's/^\s*//' | sed 's/^variant\s*//' | cut -d ' ' -f 2- | tr '(' ' ' | tr ')' ' ' | tr '"' ' ' )";

    if [[ -z "$ARTIST" || -z "$TITLE" ]];then
        echo "There was a problme getting the currently playing info from spotify";
        exit 1;
    fi

}

################################################################################
# Look up the song info for the currently playing song in Rhythmbox
# Sets the global ARTIST and TITLE varibles
################################################################################
function lookupRhythmboxInfo() {
    # This is a nasty one-liner that returns data like this:
    # string "artist"
    # variant             string "City and Colour"
    # --
    # string "title"
    # variant             string "Like Knives"

    ALL="$(dbus-send --print-reply --dest=org.gnome.Rhythmbox /org/gnome/Rhythmbox/Shell org.gnome.Rhythmbox.Shell.getSongProperties string:$(dbus-send --print-reply --dest=org.gnome.Rhythmbox /org/gnome/Rhythmbox/Player org.gnome.Rhythmbox.Player.getPlayingUri | grep string | sed 's/^\s*//g' | cut -d ' ' -f 2 | sed 's/"//g') | sed 's/^\s*//' | grep 'string "artist"\|string "title"' -A 1)";

    # Get the Artist out of the dbus call
    ARTIST="$(echo  "$ALL" | grep artist -A 1  | grep variant | cut -d ' ' -f 15- | sed 's/"//g')";
    # Get the Title out of the dbus call
    TITLE="$(echo "$ALL" | grep title -A 1  | grep variant | cut -d ' ' -f 15- | sed 's/"//g')";
    
}

################################################################################
# Usage info
################################################################################
function usage() {
    echo "$(basename $0) - Find out the songlyrics for a currently playing song."
    echo "This script is capable of finding out the Artist and Title of the currently"
    echo "playing song. If, you are using Rhythmbox or Spotify. See usage message below."
    echo
    echo "Do it like this:"
    echo "$(basename $0) <artist> <title>       - To display lyrics for a song"
    echo "$(basename $0) spotify                - To look up info for the currently playing song in Spotify"
    echo "$(basename $0) rhythmbox|rbox         - To look up info for the currently playing song in Rhythmbox"
    echo "$(basename $0) <songlyrics.com url>   - To display the lyrics from a given songlyrics.com url"
    echo "$(basename $0) <azlyrics.com url>     - To display the lyrics from a given songlyrics.com url"
    # Print the args if any were passed
    if [[ -n "$1" ]];then
        echo -e "\nERROR:\n$1"
    fi
    exit 0;
}
################################################################################
# Main (Arg parsing crap)
################################################################################
########################################
# If given a songlyrics url 
########################################
if [[ "$(echo $1 | grep 'http://.*songlyrics.com' -i)" ]];then
    do_it_songLyrics --url "$1"
    exit; 

########################################
# Or an azlyrics url
########################################
elif [[ "$(echo $1 | grep 'http://.*azlyrics.com' -i)" ]];then
    do_it_azlyrics --url "$1"
    exit; 

########################################
# look up the username from the Rhythmbox dbus api
########################################
elif [[ "$1" == 'rhythmbox' || "$1" == 'rbox' ]]; then
    lookupRhythmboxInfo
    echo "Looking up title by Rhythmbox artist and title...";
    echo "Artist: $ARTIST";
    echo "TITLE: $TITLE";

    do_it_azlyrics "$ARTIST" "$TITLE";
    exit 0;

########################################
# look up the username from the spotify dbus api
########################################
elif [[ "$1" == 'spotify' ]]; then
    # Sets the global ARTIST and TITLE vars
    lookupSpotifyInfo
    echo "Looking up title by Spotify artist and title...";
    echo "Artist: $ARTIST";
    echo "TITLE: $TITLE";

    do_it_azlyrics "$ARTIST" "$TITLE";
    exit 0;

########################################
# Artist Title args to look up
########################################
elif [[ -n "$1" && -n "$2" ]];then
    do_it_songLyrics "$1" "$2";
    exit 0;
else
    usage 
fi
